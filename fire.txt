'rename fire.txt to fire.bas
'open new excel sheet and save as .xslm
'open developer tools
'File -> import module fire.bas
'Tools -> References -> check boxes for Microsoft Scripting Runtime and Microsoft XML v6.0

'Test Data:
'1369 El Hito Cir, Pacific Palisades, CA 90272
'15007 Bestor Blvd, Pacific Palisades, CA 90272

Option Explicit

Function GetFireData(address As String) As String
    Dim http As Object
    Dim result As String
    Dim url As String
    Dim payload As String
    
    url = "https://edukonis.com/check-address"
    Set http = CreateObject("MSXML2.XMLHTTP")
    payload = "{""address"": """ & address & """}"
    
    http.Open "POST", url, False
    http.setRequestHeader "Content-Type", "application/json"
    http.Send payload
    
    If http.Status = 200 Then
        Dim responseText As String
        responseText = http.responseText
        
        ' Extract data from the JSON response
        Dim lat As String, lon As String
        Dim insidePolygon As Boolean
        Dim closestPolygon As String, distanceMiles As String
        Dim polygonName As String
        
        ' Extract coordinates
        lat = ExtractJSONValue(responseText, "lat", False)
        lon = ExtractJSONValue(responseText, "lon", False)
        
        ' Extract inside status
        Dim insideStr As String
        insideStr = ExtractJSONValue(responseText, "inside", False)
        insidePolygon = (LCase(insideStr) = "true")
        
        ' Extract polygon info
        If insidePolygon Then
            ' If inside is true, get the polygon name from the "polygon" field
            polygonName = ExtractJSONValue(responseText, "polygon", True)
            'closestPolygon = ""
            distanceMiles = "0.0"
        Else
            ' If outside, get the closest polygon and distance
            polygonName = ExtractJSONValue(responseText, "closest_polygon", True)
            'closestPolygon = ExtractJSONValue(responseText, "closest_polygon", True)
            distanceMiles = ExtractJSONValue(responseText, "distance_miles", False)
        End If
        
        ' Format the result as CSV
        ' Format: lat,long,inside_polygon,polygon_name,nearest_polygon,distance
        result = lat & "," & lon & ","
        result = result & (IIf(insidePolygon, "TRUE", "FALSE")) & ","
        result = result & polygonName & ","
        'result = result & closestPolygon & ","
        result = result & distanceMiles
        
    Else
        result = "ERROR," & http.Status & "," & http.StatusText & ",,,,"
    End If
    
    GetFireData = result
End Function

' Helper function to parse JSON values
Function ExtractJSONValue(jsonText As String, key As String, isString As Boolean) As String
    Dim keyPattern As String
    Dim valueStart As Long, valueEnd As Long
    
    If isString Then
        keyPattern = """" & key & """:"""
        valueStart = InStr(jsonText, keyPattern) + Len(keyPattern)
        If valueStart > Len(keyPattern) Then
            valueEnd = InStr(valueStart, jsonText, """")
            ExtractJSONValue = Mid(jsonText, valueStart, valueEnd - valueStart)
        Else
            ExtractJSONValue = ""
        End If
    Else
        keyPattern = """" & key & """:"
        valueStart = InStr(jsonText, keyPattern) + Len(keyPattern)
        If valueStart > Len(keyPattern) Then
            valueEnd = InStr(valueStart, jsonText, ",")
            If valueEnd = 0 Then ' might be at the end of an object
                valueEnd = InStr(valueStart, jsonText, "}")
            End If
            ExtractJSONValue = Mid(jsonText, valueStart, valueEnd - valueStart)
        Else
            ExtractJSONValue = ""
        End If
    End If
End Function
